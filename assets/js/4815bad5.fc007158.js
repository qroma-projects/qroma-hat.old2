"use strict";(self.webpackChunkwww_qroma_project=self.webpackChunkwww_qroma_project||[]).push([[6303],{5958:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=r(4848),s=r(8453);const i={title:"Devalbo Grayscale Run Image Format"},o=void 0,a={id:"dgsr-image-format",title:"Devalbo Grayscale Run Image Format",description:"Overview",source:"@site/src/get-started/dgsr-image-format.md",sourceDirName:".",slug:"/dgsr-image-format",permalink:"/qroma-hat/get-started/dgsr-image-format",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Devalbo Grayscale Run Image Format"},sidebar:"getStartedSidebar",previous:{title:"Project Notes",permalink:"/qroma-hat/get-started/project-notes"}},d={},l=[{value:"Overview",id:"overview",level:3},{value:"Details",id:"details",level:3},{value:"ImHex Pattern (dgsr.hexpat)",id:"imhex-pattern-dgsrhexpat",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Specification Version 1.0 as of 2023-02-05"}),"\n",(0,t.jsxs)(n.li,{children:["Copyright 2023 - ",(0,t.jsx)(n.a,{href:"https://www.devalbo.com",children:"Devalbo"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Inspired by ",(0,t.jsx)(n.a,{href:"https://qoiformat.org/qoi-specification.pdf",children:"https://qoiformat.org/qoi-specification.pdf"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"This format was developed to compress grayscale images for e-ink screens using simple, reasonable implementations in both firmware and Javascript/Typescript implementations for the Qroma Hat project."})}),"\n",(0,t.jsx)(n.h3,{id:"details",children:"Details"}),"\n",(0,t.jsxs)(n.p,{children:["A Devalbo Grayscale Run (DGSR) image file consists of a ",(0,t.jsx)(n.code,{children:"dgsr_header"}),", followed by any number of ",(0,t.jsx)(n.em,{children:"data chunks"}),", and an 8-byte end marker."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'dgsr_header {\r\n  char magic[4];            // 4 magic bytes "dgsr"\r\n  uint32_t width;           // image width in pixels (4 bytes - BE)\r\n  uint32_t height;          // image height in pixels (4 bytes - BE)\r\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Images are encoded row by row, left to right, top to bottom, wrapping to the next line when the row's width has been exceeded. The decoder and encoder start with 0 as the previous pixel value. An image is complete when all pixels specified by ",(0,t.jsx)(n.code,{children:"width x height"})," have been covered."]}),"\n",(0,t.jsxs)(n.p,{children:["Grayscale pixels are encoded with ",(0,t.jsx)(n.em,{children:"data chunks"})," as:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DGSR_OP_PLACE_PIXEL"})," - place a single grayscale pixel (level 0-63)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DGSR_OP_SHORT_RUN"})," - start a short run of the previous pixel (uses 6 bits of op code byte, 0-63 pixels)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DGSR_OP_MEDIUM_RUN"})," - start a medium run of the previous pixel (uses 6 bits of op code byte, plus following 1 byte, treated as two bytes without the top 2 most significant bits)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DGSR_OP_LONG_RUN"})," - start a long run of the previous pixel (uses 6 bits of op code byte, plus following 3 bytes, treated as four bytes without the top 2 most significant bits)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The byte stream's end is marked with 7 ",(0,t.jsx)(n.code,{children:"0x00"})," bytes followed by a single ",(0,t.jsx)(n.code,{children:"0x01"})," byte."]}),"\n",(0,t.jsxs)(n.p,{children:["Possible ",(0,t.jsx)(n.em,{children:"data chunks"})," are:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"DGSR_OP_PLACE_PIXEL\r\nDGSR_OP_SHORT_RUN\r\nDGSR_OP_MEDIUM_RUN\r\nDGSR_OP_LONG_RUN\r\n\r\n\r\n\u250c\u2500 DGSR_OP_PLACE_PIXEL \u2500\u2500\u2510\r\n\u2502        Byte[0]         \u2502\r\n\u2502 7  6  5  4  3  2  1  0 \u2502\r\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\r\n\u2502 0  0 \u2502  GS bits (0-63) \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\u250c\u2500 DGSR_OP_SHORT_RUN \u2500\u2500\u2500\u2500\u2510\r\n\u2502        Byte[0]         \u2502\r\n\u2502 7  6  5  4  3  2  1  0 \u2502\r\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\r\n\u2502 0  1 \u2502  Run length     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\u250c\u2500 DGSR_OP_MEDIUM_RUN \u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        Byte[0]         \u2502 Byte[1] \u2502\r\n\u2502 7  6  5  4  3  2  1  0 \u2502 7 .. 0  \u2502\r\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\r\n\u2502 1  0 \u2502  Run length bits (14)     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\u250c\u2500 DGSR_OP_LONG_RUN \u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        Byte[0]         \u2502 Byte[1] \u2502 Byte[2] \u2502 Byte[3] \u2502\r\n\u2502 7  6  5  4  3  2  1  0 \u2502 7 .. 0  \u2502 7 .. 0  \u2502 7 .. 0  \u2502\r\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\r\n\u2502 1  1 \u2502  Run length bits (30)                         \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"imhex-pattern-dgsrhexpat",children:"ImHex Pattern (dgsr.hexpat)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/WerWolv/ImHex",children:"https://github.com/WerWolv/ImHex"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'#pragma description DGSR (Devalbo Grayscale Run image format)\r\n\r\n#pragma endian big\r\n\r\nimport type.magic;\r\nimport type.size;\r\n\r\nimport std.mem;\r\n\r\n\r\nstruct DgsrHeader {\r\n  type::Magic<"\\x64\\x67\\x73\\x72"> magic;\r\n  be u32 width;\r\n  be u32 height;\r\n};\r\n\r\n\r\nfn find_op_codes_start() {\r\n  return std::mem::size() - 12;\r\n};\r\n\r\nfn get_op_codes_length() {\r\n  return std::mem::size() - (12 + 8);\r\n};\r\n\r\nfn get_final_bytes_start() {\r\n  return std::mem::size() - 8;\r\n};\r\n\r\nu32 opCodesStart = find_op_codes_start();\r\nu32 opCodesLength = get_op_codes_length();\r\nu32 finalBytesStart = get_final_bytes_start();\r\n\r\nenum OpCodeType : u8 {\r\n  PlacePixel = 0b00000000 ... 0b00111111,\r\n  ShortRun   = 0b01000000 ... 0b01111111,\r\n  MediumRun  = 0b10000000 ... 0b10111111,\r\n  LongRun    = 0b11000000 ... 0b11111111\r\n};\r\n\r\n\r\nbitfield OpCodePlacePixel {\r\n  tag : 2;\r\n  grayscale: 6;\r\n};\r\n\r\nbitfield OpCodeShortRun {\r\n  tag : 2;\r\n  runLength: 6;\r\n};\r\n\r\nbitfield OpCodeMediumRun {\r\n  tag : 2;\r\n  runLength: 14;\r\n};\r\n\r\nbitfield OpCodeLongRun {\r\n  tag : 2;\r\n  runLength: 30;\r\n};\r\n\r\n\r\nu8 opCodeDef;\r\nfn get_opCodeDef() {\r\n    opCodeDef = std::mem::read_unsigned($, 1);\r\n    opCodeDef &= 0b11000000;\r\n};\r\n\r\nstruct OpCode {\r\n    get_opCodeDef();\r\n    if      (opCodeDef == OpCodeType::PlacePixel) OpCodePlacePixel;\r\n    else if (opCodeDef == OpCodeType::ShortRun)  OpCodeShortRun;\r\n    else if (opCodeDef == OpCodeType::MediumRun)  OpCodeMediumRun;\r\n    else if (opCodeDef == OpCodeType::LongRun)   OpCodeLongRun;\r\n};\r\n\r\nstruct FinalBytes {\r\n  u8 f1  [[name("fb1")]];\r\n\tu8 f2  [[name("fb2")]];\r\n\tu8 f3  [[name("fb3")]];\r\n\tu8 f4  [[name("fb4")]];\r\n\tu8 f5  [[name("fb5")]];\r\n\tu8 f6  [[name("fb6")]];\r\n\tu8 f7  [[name("fb7")]];\r\n\tu8 f8  [[name("fb8")]];\r\n};\r\n\r\n\r\nstruct DgsrFile {\r\n  DgsrHeader header;\r\n  // OpCode opCodes[while(!std::mem::eof())];\r\n\tOpCode opCodes[while($ < finalBytesStart)];\r\n  FinalBytes finalBytes;\r\n};\r\n\r\n\r\nDgsrFile dgsrFile @ 0 [[name("dgsr")]];\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);