// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-core.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FirmwareDetails } from "./qroma-types";
import { HeartbeatResponse } from "./qroma-types";
import { QromaCoreConfig } from "./qroma-config";
/**
 * @generated from protobuf message GetQromaCoreConfigCommand
 */
export interface GetQromaCoreConfigCommand {
    /**
     * @generated from protobuf field: uint32 ignoreThis = 1;
     */
    ignoreThis: number;
}
/**
 * @generated from protobuf message GetQromaCoreFirmwareDetailsCommand
 */
export interface GetQromaCoreFirmwareDetailsCommand {
    /**
     * @generated from protobuf field: uint32 ignoreThis = 1;
     */
    ignoreThis: number;
}
/**
 * @generated from protobuf message RestartQromaDevice
 */
export interface RestartQromaDevice {
    /**
     * @generated from protobuf field: uint32 ignoreThis = 1;
     */
    ignoreThis: number;
}
// message SetSerialCommConfigCommand {
//   uint32 ignoreThis = 1;
// }

// message RequestQromaCommReportingConfig {
//   uint32 ignoreThis = 1;
// }

// message SetLogLevelRequest {
//   Qroma_LogLevel logLevel = 1;
// }

// message SetLogLevelResponse {
//   Qroma_LogLevel logLevel = 1;
// }

// message SetHeartbeatIntervalRequest {
//   uint32 heartbeatIntervalInMs = 1;
// }

// message SetHeartbeatIntervalResponse {
//   uint32 heartbeatIntervalInMs = 1;
// }

/**
 * @generated from protobuf message QromaCoreCommand
 */
export interface QromaCoreCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "getQromaCoreConfig";
        /**
         * @generated from protobuf field: GetQromaCoreConfigCommand getQromaCoreConfig = 1;
         */
        getQromaCoreConfig: GetQromaCoreConfigCommand;
    } | {
        oneofKind: "getFirmwareDetails";
        /**
         * @generated from protobuf field: GetQromaCoreFirmwareDetailsCommand getFirmwareDetails = 2;
         */
        getFirmwareDetails: GetQromaCoreFirmwareDetailsCommand;
    } | {
        oneofKind: "restartQromaDevice";
        /**
         * @generated from protobuf field: RestartQromaDevice restartQromaDevice = 3;
         */
        restartQromaDevice: RestartQromaDevice;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaCoreResponse
 */
export interface QromaCoreResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "qromaCoreConfig";
        /**
         * @generated from protobuf field: QromaCoreConfig qromaCoreConfig = 1;
         */
        qromaCoreConfig: QromaCoreConfig;
    } | {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: HeartbeatResponse heartbeat = 2;
         */
        heartbeat: HeartbeatResponse;
    } | {
        oneofKind: "firmwareDetails";
        /**
         * @generated from protobuf field: FirmwareDetails firmwareDetails = 3;
         */
        firmwareDetails: FirmwareDetails;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GetQromaCoreConfigCommand$Type extends MessageType<GetQromaCoreConfigCommand> {
    constructor() {
        super("GetQromaCoreConfigCommand", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetQromaCoreConfigCommand>): GetQromaCoreConfigCommand {
        const message = { ignoreThis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetQromaCoreConfigCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQromaCoreConfigCommand): GetQromaCoreConfigCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ignoreThis */ 1:
                    message.ignoreThis = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQromaCoreConfigCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ignoreThis = 1; */
        if (message.ignoreThis !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetQromaCoreConfigCommand
 */
export const GetQromaCoreConfigCommand = new GetQromaCoreConfigCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQromaCoreFirmwareDetailsCommand$Type extends MessageType<GetQromaCoreFirmwareDetailsCommand> {
    constructor() {
        super("GetQromaCoreFirmwareDetailsCommand", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetQromaCoreFirmwareDetailsCommand>): GetQromaCoreFirmwareDetailsCommand {
        const message = { ignoreThis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetQromaCoreFirmwareDetailsCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQromaCoreFirmwareDetailsCommand): GetQromaCoreFirmwareDetailsCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ignoreThis */ 1:
                    message.ignoreThis = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQromaCoreFirmwareDetailsCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ignoreThis = 1; */
        if (message.ignoreThis !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetQromaCoreFirmwareDetailsCommand
 */
export const GetQromaCoreFirmwareDetailsCommand = new GetQromaCoreFirmwareDetailsCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartQromaDevice$Type extends MessageType<RestartQromaDevice> {
    constructor() {
        super("RestartQromaDevice", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RestartQromaDevice>): RestartQromaDevice {
        const message = { ignoreThis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RestartQromaDevice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartQromaDevice): RestartQromaDevice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ignoreThis */ 1:
                    message.ignoreThis = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestartQromaDevice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ignoreThis = 1; */
        if (message.ignoreThis !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RestartQromaDevice
 */
export const RestartQromaDevice = new RestartQromaDevice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCoreCommand$Type extends MessageType<QromaCoreCommand> {
    constructor() {
        super("QromaCoreCommand", [
            { no: 1, name: "getQromaCoreConfig", kind: "message", oneof: "command", T: () => GetQromaCoreConfigCommand },
            { no: 2, name: "getFirmwareDetails", kind: "message", oneof: "command", T: () => GetQromaCoreFirmwareDetailsCommand },
            { no: 3, name: "restartQromaDevice", kind: "message", oneof: "command", T: () => RestartQromaDevice }
        ]);
    }
    create(value?: PartialMessage<QromaCoreCommand>): QromaCoreCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCoreCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCoreCommand): QromaCoreCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetQromaCoreConfigCommand getQromaCoreConfig */ 1:
                    message.command = {
                        oneofKind: "getQromaCoreConfig",
                        getQromaCoreConfig: GetQromaCoreConfigCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).getQromaCoreConfig)
                    };
                    break;
                case /* GetQromaCoreFirmwareDetailsCommand getFirmwareDetails */ 2:
                    message.command = {
                        oneofKind: "getFirmwareDetails",
                        getFirmwareDetails: GetQromaCoreFirmwareDetailsCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).getFirmwareDetails)
                    };
                    break;
                case /* RestartQromaDevice restartQromaDevice */ 3:
                    message.command = {
                        oneofKind: "restartQromaDevice",
                        restartQromaDevice: RestartQromaDevice.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).restartQromaDevice)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCoreCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetQromaCoreConfigCommand getQromaCoreConfig = 1; */
        if (message.command.oneofKind === "getQromaCoreConfig")
            GetQromaCoreConfigCommand.internalBinaryWrite(message.command.getQromaCoreConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetQromaCoreFirmwareDetailsCommand getFirmwareDetails = 2; */
        if (message.command.oneofKind === "getFirmwareDetails")
            GetQromaCoreFirmwareDetailsCommand.internalBinaryWrite(message.command.getFirmwareDetails, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* RestartQromaDevice restartQromaDevice = 3; */
        if (message.command.oneofKind === "restartQromaDevice")
            RestartQromaDevice.internalBinaryWrite(message.command.restartQromaDevice, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCoreCommand
 */
export const QromaCoreCommand = new QromaCoreCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCoreResponse$Type extends MessageType<QromaCoreResponse> {
    constructor() {
        super("QromaCoreResponse", [
            { no: 1, name: "qromaCoreConfig", kind: "message", oneof: "response", T: () => QromaCoreConfig },
            { no: 2, name: "heartbeat", kind: "message", oneof: "response", T: () => HeartbeatResponse },
            { no: 3, name: "firmwareDetails", kind: "message", oneof: "response", T: () => FirmwareDetails }
        ]);
    }
    create(value?: PartialMessage<QromaCoreResponse>): QromaCoreResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCoreResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCoreResponse): QromaCoreResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCoreConfig qromaCoreConfig */ 1:
                    message.response = {
                        oneofKind: "qromaCoreConfig",
                        qromaCoreConfig: QromaCoreConfig.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).qromaCoreConfig)
                    };
                    break;
                case /* HeartbeatResponse heartbeat */ 2:
                    message.response = {
                        oneofKind: "heartbeat",
                        heartbeat: HeartbeatResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).heartbeat)
                    };
                    break;
                case /* FirmwareDetails firmwareDetails */ 3:
                    message.response = {
                        oneofKind: "firmwareDetails",
                        firmwareDetails: FirmwareDetails.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).firmwareDetails)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCoreResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCoreConfig qromaCoreConfig = 1; */
        if (message.response.oneofKind === "qromaCoreConfig")
            QromaCoreConfig.internalBinaryWrite(message.response.qromaCoreConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* HeartbeatResponse heartbeat = 2; */
        if (message.response.oneofKind === "heartbeat")
            HeartbeatResponse.internalBinaryWrite(message.response.heartbeat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* FirmwareDetails firmwareDetails = 3; */
        if (message.response.oneofKind === "firmwareDetails")
            FirmwareDetails.internalBinaryWrite(message.response.firmwareDetails, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCoreResponse
 */
export const QromaCoreResponse = new QromaCoreResponse$Type();
